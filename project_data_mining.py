# -*- coding: utf-8 -*-
"""Project Data Mining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OmGIFFGK4x7SoaBVIg9m6eooMgGkGdkH

# Implementasi Aturan Asosiasi dengan Algoritma Apriori untuk menentukan Pola Kunjungan Wisatawan Mancanegara ke Indonesia

|Nama|NIM|
|-|-|
|Ilhan Mahardika Pratama|H1D020058|
|Abdalhaqq Muhammad Saih|H1D020068|
|Ahmad Karomi Alhamidy|H1D020069|

Note: Buka [notebook](https://colab.research.google.com/drive/1OmGIFFGK4x7SoaBVIg9m6eooMgGkGdkH#scrollTo=rtdDOZUTOqQ3) untuk menjalankan program secara interaktif

## Mengimpor library yang dibutuhkan
"""

import io
import pandas as pd
from google.colab import files
from mlxtend.frequent_patterns import apriori, association_rules

"""## Memuat dataset"""

uploaded = files.upload()
filename = list(uploaded)[0]
df = pd.read_csv(io.BytesIO(uploaded[filename]), index_col=0)
df.dropna(inplace=True)
df

"""## Membuat perbandingan wisatawan dari tahun ke tahun"""

it = iter(df)
a = next(it)
def fp(a, b):
    return float(b-a)/a*100
comparations = {}
for b in it:
    for x in df.index:
        na = df[a][x]
        nb = df[b][x]
        if not comparations.get(b):
            comparations[b] = {}
        comparations[b][x] = fp(na, nb)
    a = b
pd.DataFrame(comparations)

"""## Mengubah perbandingan ke dalam fungsi keanggotaan menjadi data kategorikal"""

memberships = {}
def fk(per):
    b1 = 100/3.0
    b2 = b1*2
    b3 = -100/3.0
    b4 = b3*2
    return 'Naik Tinggi' if per >= b2 else 'Naik Sedang' if per > b1 else 'Naik Rendah' if per > 0 else 'Turun Tinggi' if per <= b4 else 'Turun Sedang' if per < b3 else 'Turun Rendah'
for year in comparations:
    if not memberships.get(year):
        memberships[year] = {}
    for k,v in comparations[year].items():
        memberships[year][k] = fk(v)
pd.DataFrame(memberships)

"""## Transformasi data ke dalam bentuk transaksi"""

categories = {'NT':'Naik Tinggi', 'NS':'Naik Sedang', 'NR':'Naik Rendah', 'TT':'Turun Tinggi', 'TS':'Turun Sedang', 'TR':'Turun Rendah'}
columns = []
for country in df.index:
    for category in categories:
        columns.append(f'{category}_{country}')
transactions = []
for year in memberships:
    transaction = {}
    for country in memberships[year]:
        for category in categories:
            transaction[f'{category}_{country}'] = 1 if memberships[year][country] == categories[category] else 0
    transactions.append(transaction)

dataset = pd.DataFrame(transactions)
dataset

"""## Men-*generate* kombinasi itemset sesuai minimum support"""

min_support = float(input("Masukan nilai min. support  "))
frequent_itemsets = apriori(dataset, min_support=min_support, use_colnames=True)
frequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))

frequent_itemsets

"""## Membuat kandidat aturan asosiasi"""

min_conf = float(input("Masukan nilai min. confidence  "))
candidate_rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=min_conf)
candidate_rules["antecedents_length"] = candidate_rules["antecedents"].apply(lambda x: len(x))
candidate_rules["consequents_length"] = candidate_rules["consequents"].apply(lambda x: len(x))
candidate_rules

"""## Menyeleksi kandidat aturan asosiasi dengan consequent = 1"""

select_rules = candidate_rules["consequents"].apply(lambda x: len(x) == 1)
rules = candidate_rules.loc[select_rules].copy()
rules["support * confidence"] = rules["support"] * rules["confidence"]
rules

"""## Menentukan aturan asosiasi dari nilai support * confidence tertinggi"""

max_sup_x_conf = rules.max()["support * confidence"]
select_final = rules["support * confidence"].apply(lambda x: x == max_sup_x_conf)
final_rules = rules.loc[select_final].copy()
final_rules